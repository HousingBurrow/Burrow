// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PropertyType {
  APARTMENT
  HOUSE
}

enum RoomType {
  SINGLE
  DOUBLE
}

enum ApartmentType {
  SixBySix
  FiveByFive
  FourByFour
  ThreeByThree
  TwoByTwo
  Studio
  
  FiveByThree
  FiveByFour
  
}

enum Location {
  Midtown
  WestMidtown
  HomePark
  NorthAvenue
}

model User {
  id          Int     @id @default(autoincrement())
  email       String  @unique
  first_name  String
  last_name   String
  gender      String
  age         Int
  listings    Listing[]
  @@index([last_name])
}

model Listing {
  id                      Int  @id @default(autoincrement())
  Title                   String
  address                 String
  description             String
  property_type           PropertyType
  Location                Location
  distance_in_miles       Decimal

  price                   Decimal
  num_rooms_available     Int
  total_rooms             Int
  number_roommates        Int
  utilities_included      Boolean
  SqFt                    Int

  start_date              DateTime
  end_date                DateTime
  created_at              DateTime
  updated_at              DateTime

  apartmentDetails   ApartmentDetails?
  houseDetails       HouseDetails?

  listerId                Int
  lister                  User  @relation(fields: [listerId], references: [id], onDelete: Cascade)
  @@index([listerId])
  @@index([property_type])
}

model ApartmentDetails {
  id                Int      @id @default(autoincrement())
  listingId         Int      @unique
  listing           Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  room_type         RoomType
  apartment_type    ApartmentType

}

model HouseDetails {
  id                Int      @id @default(autoincrement())
  listingId         Int      @unique
  listing           Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  num_bathrooms     Decimal
  num_rooms         Int
}


